AWSTemplateFormatVersion: 2010-09-09
Description: Root stack that will deploy all the resources for the WordPress Scalable Architecture

Parameters:
  S3TemplatePath:
    Type: String
    Description: Name of s3 bucket where templates are stored (ex. aws-cf-wordpress-nested)
    Default: aws-cf-wordpress-nested
  CidrBlockValue:
    Type: "String"
    Default: 10.16.0.0/16
    Description: "Enter a subnet to split into twelve /20 subnets"
  RDSMultiAZ:
    Description: Select True if you want to use Multi AZ, additional AWS charges will apply
    Type: "String"
    Default: "False"
    AllowedValues:
      - "True"
      - "False"
  DatabaseName:
    Description: "Specify a DB name"
    Default: wpdatabase
    Type: String
    AllowedPattern: "^[a-zA-Z0-9]{2,64}$"
    ConstraintDescription: "May only contain uppercase, lowercase, or numbers with a minimum of 2 and a maximum of 64 characters"
  AppAsgMax:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 1 and 30.
    Default: 1
    Description: Specifies the maximum number of EC2 instances in the App Autoscaling Group.
    Type: String
  AppAsgMin:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 1
    Description: Specifies the minimum number of EC2 instances in the App Autoscaling Group.
    Type: String
  AppAsgDesired:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 1
    Description: Specifies the Desired of EC2 instances in the App Autoscaling Group.
    Type: String
  LatestAmiId:
    Description: AMI for Wordpress App Instances (default is latest AmaLinux2)
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

Resources:
  VPCStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        Fn::Sub: "https://s3.amazonaws.com/${S3TemplatePath}/1-VPC.yaml"
      Parameters:
        CidrBlockValue:
          Ref: CidrBlockValue
      Tags:
        - Key: Name
          Value: VPCStack

  SGStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        Fn::Sub: "https://s3.amazonaws.com/${S3TemplatePath}/2-SG.yaml"
      Parameters:
        VPCID:
          Fn::GetAtt: VPCStack.Outputs.exportVPC
      Tags:
        - Key: Name
          Value: SGStack

  ALBStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        Fn::Sub: "https://s3.amazonaws.com/${S3TemplatePath}/3-ALB.yaml"
      Parameters:
        VPCID:
          Fn::GetAtt: VPCStack.Outputs.exportVPC
        PublicSubnetA:
          Fn::GetAtt: VPCStack.Outputs.exportSubnetPublicA
        PublicSubnetB:
          Fn::GetAtt: VPCStack.Outputs.exportSubnetPublicB
        PublicSubnetC:
          Fn::GetAtt: VPCStack.Outputs.exportSubnetPublicC
        ALBSG:
          Fn::GetAtt: SGStack.Outputs.exportSGALB
      Tags:
        - Key: Name
          Value: ALBStack

  EFSStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        Fn::Sub: "https://s3.amazonaws.com/${S3TemplatePath}/4-EFS.yaml"
      Parameters:
        WordPressSG:
          Fn::GetAtt: SGStack.Outputs.exportSGWordpress
        DataSubnetA:
          Fn::GetAtt: VPCStack.Outputs.exportSubnetDataA
        DataSubnetB:
          Fn::GetAtt: VPCStack.Outputs.exportSubnetDataB
        DataSubnetC:
          Fn::GetAtt: VPCStack.Outputs.exportSubnetDataC
      Tags:
        - Key: Name
          Value: EFSStack

  RDSStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        Fn::Sub: "https://s3.amazonaws.com/${S3TemplatePath}/5-RDS.yaml"
      Parameters:
        RDSMultiAZ:
          Ref: RDSMultiAZ
        DatabaseName:
          Ref: DatabaseName
        RDSSG:
          Fn::GetAtt: SGStack.Outputs.exportSGRDS
        DataSubnetA:
          Fn::GetAtt: VPCStack.Outputs.exportSubnetDataA
        DataSubnetB:
          Fn::GetAtt: VPCStack.Outputs.exportSubnetDataB
        DataSubnetC:
          Fn::GetAtt: VPCStack.Outputs.exportSubnetDataC
      Tags:
        - Key: Name
          Value: RDSStack

  IAMStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        Fn::Sub: "https://s3.amazonaws.com/${S3TemplatePath}/6-IAM.yaml"
      Parameters:
        RDSSecretsARN:
          Fn::GetAtt: RDSStack.Outputs.exportRDSSecretsARN
      Tags:
        - Key: Name
          Value: IAMStack

  LTStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        Fn::Sub: "https://s3.amazonaws.com/${S3TemplatePath}/7-LT.yaml"
      Parameters:
        LatestAmiId:
          Ref: LatestAmiId
        InstanceProfileWordPress:
          Fn::GetAtt: IAMStack.Outputs.exportWordpressInstanceProfile
        WordPressSG:
          Fn::GetAtt: SGStack.Outputs.exportSGWordpress
      Tags:
        - Key: Name
          Value: LTStack

  ASGStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        Fn::Sub: "https://s3.amazonaws.com/${S3TemplatePath}/8-ASG.yaml"
      Parameters:
        AppAsgMax:
          Ref: AppAsgMax
        AppAsgMin:
          Ref: AppAsgMin
        AppAsgDesired:
          Ref: AppAsgDesired
        AppSubnetA:
          Fn::GetAtt: VPCStack.Outputs.exportSubnetAppA
        AppSubnetB:
          Fn::GetAtt: VPCStack.Outputs.exportSubnetAppB
        AppSubnetC:
          Fn::GetAtt: VPCStack.Outputs.exportSubnetAppC
        LaunchTemplateWordpress:
          Fn::GetAtt: LTStack.Outputs.exportWordpressLaunchTemplate
      Tags:
        - Key: Name
          Value: ASGStack

Outputs:
  WebELBURL:
    Description: "URL endpoint of web ELB"
    Value:
      Fn::GetAtt: ALBStack.Outputs.WordpressURL
